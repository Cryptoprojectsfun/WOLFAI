apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantai
  namespace: staging
  labels:
    app: quantai
    environment: staging
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: quantai
      environment: staging
  template:
    metadata:
      labels:
        app: quantai
        environment: staging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: quantai
        image: quantai:staging
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: PORT 
          value: "8080"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: quantai-staging-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: quantai-staging-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: quantai-staging-secrets
              key: jwt-secret
        resources:
          requests:
            cpu: "250m"
            memory: "256Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
      - name: model-server
        image: quantai-model:staging
        ports:
        - containerPort: 5000
        env:
        - name: MODEL_PATH
          value: "/models"
        - name: LOG_LEVEL
          value: "debug"
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        volumeMounts:
        - name: model-storage
          mountPath: /models
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 20
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-storage-pvc-staging
---
apiVersion: v1
kind: Service
metadata:
  name: quantai
  namespace: staging
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: quantai
    environment: staging
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantai
  namespace: staging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantai
  minReplicas: 2
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quantai
  namespace: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - staging.api.quantai.com
    secretName: quantai-staging-tls
  rules:
  - host: staging.api.quantai.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quantai
            port:
              number: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-storage-pvc-staging
  namespace: staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantai-staging-config
  namespace: staging
data:
  log-level: "debug"
  rate-limit: "200"
  max-connections: "500"
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: quantai
  namespace: staging
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: quantai
      environment: staging
  endpoints:
  - port: http
    interval: 15s
    path: /metrics